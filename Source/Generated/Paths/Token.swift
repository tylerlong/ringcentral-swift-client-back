import Foundation
import ObjectMapper
import Alamofire
open class Token: Model {
    public override var pathSegment: String {
        get{
            return "token"
        }
    }
    // OAuth2 Get Token
    open func post(callback: @escaping (_ t: PostResponse?, _ error: HTTPError?) -> Void) {
        rc.post(self.endpoint()) { (t: PostResponse?, error) in
            callback(t, error)
        }
    }
    // OAuth2 Get Token
    open func post(parameters: Parameters, callback: @escaping (_ t: PostResponse?, _ error: HTTPError?) -> Void) {
        rc.post(self.endpoint(), parameters: parameters) { (t: PostResponse?, error) in
            callback(t, error)
        }
    }
    // OAuth2 Get Token
    open func post(parameters: PostParameters, callback: @escaping (_ t: PostResponse?, _ error: HTTPError?) -> Void) {
        post(parameters: parameters.toParameters(), callback: callback)
    }
    open class PostParameters: Mappable {
        // Must hold password value for Resource Owner Credentials flow. If client application is not authorized by the specified grant_type, response does not contain refresh_token and refresh_token_ttl attributes
        open var `grant_type`: String?
        // Optional. Access token lifetime in seconds; the possible values are from 600 sec (10 min) to 3600 sec (1 hour). The default value is 3600 sec. If the value specified exceeds the default one, the default value is set. If the value specified is less than 600 seconds, the minimum value (600 sec) is set
        open var `access_token_ttl`: Int?
        // Optional. Refresh token lifetime in seconds. The default value depends on the client application, but as usual it equals to 7 days. If the value specified exceeds the default one, the default value is applied. If client specifies refresh_token_ttl<=0, refresh token is not returned even if the corresponding grant type is supported
        open var `refresh_token_ttl`: Int?
        // Phone number linked to account or extension in account in E.164 format with or without leading "+" sign
        open var `username`: String?
        // Optional. Extension short number. If company number is specified as a username, and extension is not specified, the server will attempt to authenticate client as main company administrator
        open var `extension`: String?
        // User's password
        open var `password`: String?
        // Optional. List of API permissions to be used with access token (see Application Permissions). Can be omitted when requesting all permissions defined during the application registration phase
        open var `scope`: String?
        // Optional. Unique identifier of a client application. You can pass it in request according to pattern [a-zA-Z0-9_\-]{1,64}. Otherwise it is auto-generated by server. The value will be returned in response in both cases
        open var `endpoint_id`: String?
        required public init?(map: Map) {
        }
        open func mapping(map: Map) {
            `grant_type` <- map["grant_type"]
            `access_token_ttl` <- map["access_token_ttl"]
            `refresh_token_ttl` <- map["refresh_token_ttl"]
            `username` <- map["username"]
            `extension` <- map["extension"]
            `password` <- map["password"]
            `scope` <- map["scope"]
            `endpoint_id` <- map["endpoint_id"]
        }
        open func toParameters() -> Parameters {
            var result = [String: Any]()
            result["grant_type"] = self.grant_type
            result["access_token_ttl"] = self.access_token_ttl
            result["refresh_token_ttl"] = self.refresh_token_ttl
            result["username"] = self.username
            result["extension"] = self.extension
            result["password"] = self.password
            result["scope"] = self.scope
            result["endpoint_id"] = self.endpoint_id
            return result
        }
    }
    open class PostResponse: Mappable {
        // Access token to pass to subsequent API requests
        open var `access_token`: String?
        // Issued access token TTL (time to live), in seconds
        open var `expires_in`: Int?
        // Refresh token to get a new access token, when the issued one expires
        open var `refresh_token`: String?
        // Issued refresh token TTL (time to live), in seconds
        open var `refresh_token_expires_in`: Int?
        // List of permissions allowed with this access token, white-space separated
        open var `scope`: String?
        // Type of token. Use this parameter in Authorization header of requests
        open var `token_type`: String?
        // Extension identifier
        open var `owner_id`: String?
        // Unique identifier of a client application passed by the client, or auto-generated by server if not specified in request
        open var `endpoint_id`: String?
        required public init?(map: Map) {
        }
        open func mapping(map: Map) {
            `access_token` <- map["access_token"]
            `expires_in` <- map["expires_in"]
            `refresh_token` <- map["refresh_token"]
            `refresh_token_expires_in` <- map["refresh_token_expires_in"]
            `scope` <- map["scope"]
            `token_type` <- map["token_type"]
            `owner_id` <- map["owner_id"]
            `endpoint_id` <- map["endpoint_id"]
        }
        open func toParameters() -> Parameters {
            var result = [String: Any]()
            result["access_token"] = self.access_token
            result["expires_in"] = self.expires_in
            result["refresh_token"] = self.refresh_token
            result["refresh_token_expires_in"] = self.refresh_token_expires_in
            result["scope"] = self.scope
            result["token_type"] = self.token_type
            result["owner_id"] = self.owner_id
            result["endpoint_id"] = self.endpoint_id
            return result
        }
    }
}
