import Foundation
import ObjectMapper
open class Token: Model {
    public override var pathSegment: String {
        get{
            return "token"
        }
    }
    // OAuth2 Get Token
    open func post(callback: @escaping (_ t: PostResponse?, _ error: HTTPError?) -> Void) {
        rc.post(self.endpoint()) { (t: PostResponse?, error) in
            callback(t, error)
        }
    }
    open class PostResponse: Mappable {
        // Access token to pass to subsequent API requests
        open var `access_token`: String?
        // Issued access token TTL (time to live), in seconds
        open var `expires_in`: Int?
        // Refresh token to get a new access token, when the issued one expires
        open var `refresh_token`: String?
        // Issued refresh token TTL (time to live), in seconds
        open var `refresh_token_expires_in`: Int?
        // List of permissions allowed with this access token, white-space separated
        open var `scope`: String?
        // Type of token. Use this parameter in Authorization header of requests
        open var `token_type`: String?
        // Extension identifier
        open var `owner_id`: String?
        // Unique identifier of a client application passed by the client, or auto-generated by server if not specified in request
        open var `endpoint_id`: String?
        required public init?(map: Map) {
        }
        open func mapping(map: Map) {
            `access_token` <- map["access_token"]
            `expires_in` <- map["expires_in"]
            `refresh_token` <- map["refresh_token"]
            `refresh_token_expires_in` <- map["refresh_token_expires_in"]
            `scope` <- map["scope"]
            `token_type` <- map["token_type"]
            `owner_id` <- map["owner_id"]
            `endpoint_id` <- map["endpoint_id"]
        }
    }
}
